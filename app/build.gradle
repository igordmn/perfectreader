import AndroidUtils
import com.android.build.OutputFile

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'groovyx.grooid.groovy-android'
apply plugin: 'com.jakewharton.hugo'

def buildCounter = Integer.getInteger('build.counter', 0)

android {
    defaultConfig {
        applicationId 'com.dmi.perfectreader'
        versionName rootProject.version.toString()
    }

    if (config['sign.enabled']) {
        signingConfigs {
            main {
                storeFile new File(rootProject.projectDir, '.sign/' + config['sign.store.file'])
                storePassword config['sign.store.password']
                keyAlias config['sign.key.alias']
                keyPassword config['sign.key.password']
            }
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled true
            signingConfig config['sign.enabled'] ? signingConfigs.main : null
            proguardFiles 'proguard-android.pro', 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            signingConfig config['sign.enabled'] ? signingConfigs.main : null
            proguardFiles 'proguard-android-optimize.pro', 'proguard-rules.pro'
        }
    }

    // Each APK must have a different version code
    // (see "Rules for multiple APKs" at http://developer.android.com/intl/ru/google/play/publishing/multiple-apks.html)
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def buildNumber = buildCounter
            def abi = output.getFilter(OutputFile.ABI)
            output.versionCodeOverride = AndroidUtils.computeVersionCode(buildNumber, abi)
        }
    }
}

dependencies {
    compile project(':lib:readiumSdk')
    compile project(':util:util-android')
}

ext {
    archivesBaseName = rootProject.name + '-' + rootProject.version + '-b' + buildCounter
}
